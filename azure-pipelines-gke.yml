# Azure DevOps Pipeline for GKE Deployment
# This pipeline builds the Docker image, pushes it to Google Artifact Registry (GAR), 
# and deploys the Helm chart to Google Kubernetes Engine (GKE).

trigger:
- main

variables:
  # Replace with your values
  - name: gcpServiceConnection
    value: 'REPLACE_WITH_YOUR_GCP_SERVICE_CONNECTION_NAME'
  - name: gcpProjectId
    value: 'REPLACE_WITH_YOUR_GCP_PROJECT_ID'
  - name: gkeClusterName
    value: 'REPLACE_WITH_YOUR_GKE_CLUSTER_NAME'
  - name: gkeZone
    value: 'REPLACE_WITH_YOUR_GKE_ZONE'
  - name: garLocation
    value: 'us-central1' # e.g., us-central1
  - name: imageRepository
    value: 'ai-ocr'
  - name: dockerfilePath
    value: 'docker_build/Dockerfile'
  - name: helmChartPath
    value: 'helm/ai-ocr'
  - name: tag
    value: '$(Build.SourceVersion)'

stages:
- stage: Build
  displayName: Build and Push Image
  jobs:
  - job: Build
    displayName: Build Job
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: GoogleAuth@1
      displayName: 'Authenticate with GCP'
      inputs:
        key: $(gcpServiceConnection)
        
    - task: CmdLine@2
      displayName: 'Configure Docker for GAR'
      inputs:
        script: gcloud auth configure-docker $(garLocation)-docker.pkg.dev

    - task: Docker@2
      displayName: Build and push image to GAR
      inputs:
        command: buildAndPush
        repository: $(garLocation)-docker.pkg.dev/$(gcpProjectId)/$(imageRepository)/$(imageRepository)
        dockerfile: $(dockerfilePath)
        tags: |
          $(tag)
          latest

- stage: Deploy
  displayName: Deploy to GKE
  jobs:
  - job: Deploy
    displayName: Deploy Job
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: GoogleAuth@1
      displayName: 'Authenticate with GCP'
      inputs:
        key: $(gcpServiceConnection)

    - task: CmdLine@2
      displayName: 'Get GKE Credentials'
      inputs:
        script: |
          gcloud container clusters get-credentials $(gkeClusterName) --zone $(gkeZone) --project $(gcpProjectId)
      env:
        KUBECONFIG: $(Agent.TempDirectory)/kubeconfig

    - task: HelmInstaller@1
      displayName: 'Install Helm'
      inputs:
        helmVersionToInstall: 'latest'

    - task: HelmDeploy@0
      displayName: 'Helm Upgrade/Install'
      inputs:
        connectionType: 'None'
        namespace: 'default'
        command: 'upgrade'
        chartType: 'FilePath'
        chartPath: '$(helmChartPath)'
        releaseName: '$(imageRepository)'
        valueOverrides: |
          image.repository=$(garLocation)-docker.pkg.dev/$(gcpProjectId)/$(imageRepository)/$(imageRepository)
          image.tag=$(tag)
        arguments: '--install --wait --timeout 5m'
      env:
        KUBECONFIG: $(Agent.TempDirectory)/kubeconfig
